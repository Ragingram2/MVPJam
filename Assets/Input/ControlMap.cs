//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/ControlMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControlMap: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControlMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControlMap"",
    ""maps"": [
        {
            ""name"": ""Ship"",
            ""id"": ""af967624-65c8-4582-89f6-284662b81196"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""fbc3a0fa-1260-402d-bfcd-3c8368284ad4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""1f52b2a7-7852-48e4-ab7b-7752a3e458ed"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c17149f6-8f19-40b8-8f7e-6e40ef2213f4"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e515b4b-d3c1-41ff-a735-ee2c8f9ce3d0"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fbc8768f-6bb6-4460-8ee1-6a4c6a732a10"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""c285bbc5-839c-4432-8500-2440fc2951b4"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d5b4de93-5603-4573-adae-564e2282fdd8"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""401b923b-3ccc-4d57-9d3b-71a1b1b08507"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""decff089-104b-404c-97cd-773528e40720"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""21c5de40-93a2-4259-a905-1343f04be4ca"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""2bfb7c9d-75d3-4fb7-82d0-46a757c387aa"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""febf91b1-bdc7-4f4c-bcc5-be783b4b2e85"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""BuildSystem"",
            ""id"": ""253e4189-3645-4704-9a23-be8c10c04c39"",
            ""actions"": [
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""88af26f1-e7fa-4eb0-914e-db815ad84f91"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DeleteStructure"",
                    ""type"": ""Button"",
                    ""id"": ""4a8a84ec-8a40-4199-a324-dd2f3fc3850b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""Button"",
                    ""id"": ""b88ba75d-5622-453d-b4b7-d43b2a642f57"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LoadStructure"",
                    ""type"": ""Button"",
                    ""id"": ""5c118858-622b-4705-a407-afb6d8a77ebe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InitNewStructure"",
                    ""type"": ""Button"",
                    ""id"": ""e33f170f-8251-4381-9f78-c14f1700b146"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SaveStructure"",
                    ""type"": ""Button"",
                    ""id"": ""04b50a69-e389-40cd-832c-1cb396fb61d8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fa6a2b66-7db1-4b03-b8c6-2d669ca9f855"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1fe9bf0-1751-4e8b-bcc8-2ca6dc8c8776"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4762175c-9482-457e-b53f-533557a8fcdd"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""LoadStructure"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b5467ead-739e-48af-bb77-28dbef9d6b0a"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""InitNewStructure"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d6cb5d5-18bf-4da0-8958-f8fd281e4b57"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""SaveStructure"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dac4a463-a674-413e-939d-9c56d5cebae7"",
                    ""path"": ""<Keyboard>/delete"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""DeleteStructure"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Structure"",
            ""id"": ""e5472073-aa9c-4bf4-8f69-09237b5611a1"",
            ""actions"": [
                {
                    ""name"": ""TogglePlay"",
                    ""type"": ""Button"",
                    ""id"": ""83f5cd47-e3e8-43ec-94c7-d992ebea796c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bebf1e2f-3fc2-4d21-877d-3329d670733e"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""TogglePlay"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Ship
        m_Ship = asset.FindActionMap("Ship", throwIfNotFound: true);
        m_Ship_Move = m_Ship.FindAction("Move", throwIfNotFound: true);
        m_Ship_Look = m_Ship.FindAction("Look", throwIfNotFound: true);
        // BuildSystem
        m_BuildSystem = asset.FindActionMap("BuildSystem", throwIfNotFound: true);
        m_BuildSystem_LeftClick = m_BuildSystem.FindAction("LeftClick", throwIfNotFound: true);
        m_BuildSystem_DeleteStructure = m_BuildSystem.FindAction("DeleteStructure", throwIfNotFound: true);
        m_BuildSystem_RightClick = m_BuildSystem.FindAction("RightClick", throwIfNotFound: true);
        m_BuildSystem_LoadStructure = m_BuildSystem.FindAction("LoadStructure", throwIfNotFound: true);
        m_BuildSystem_InitNewStructure = m_BuildSystem.FindAction("InitNewStructure", throwIfNotFound: true);
        m_BuildSystem_SaveStructure = m_BuildSystem.FindAction("SaveStructure", throwIfNotFound: true);
        // Structure
        m_Structure = asset.FindActionMap("Structure", throwIfNotFound: true);
        m_Structure_TogglePlay = m_Structure.FindAction("TogglePlay", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Ship
    private readonly InputActionMap m_Ship;
    private List<IShipActions> m_ShipActionsCallbackInterfaces = new List<IShipActions>();
    private readonly InputAction m_Ship_Move;
    private readonly InputAction m_Ship_Look;
    public struct ShipActions
    {
        private @ControlMap m_Wrapper;
        public ShipActions(@ControlMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Ship_Move;
        public InputAction @Look => m_Wrapper.m_Ship_Look;
        public InputActionMap Get() { return m_Wrapper.m_Ship; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShipActions set) { return set.Get(); }
        public void AddCallbacks(IShipActions instance)
        {
            if (instance == null || m_Wrapper.m_ShipActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ShipActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
        }

        private void UnregisterCallbacks(IShipActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
        }

        public void RemoveCallbacks(IShipActions instance)
        {
            if (m_Wrapper.m_ShipActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IShipActions instance)
        {
            foreach (var item in m_Wrapper.m_ShipActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ShipActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ShipActions @Ship => new ShipActions(this);

    // BuildSystem
    private readonly InputActionMap m_BuildSystem;
    private List<IBuildSystemActions> m_BuildSystemActionsCallbackInterfaces = new List<IBuildSystemActions>();
    private readonly InputAction m_BuildSystem_LeftClick;
    private readonly InputAction m_BuildSystem_DeleteStructure;
    private readonly InputAction m_BuildSystem_RightClick;
    private readonly InputAction m_BuildSystem_LoadStructure;
    private readonly InputAction m_BuildSystem_InitNewStructure;
    private readonly InputAction m_BuildSystem_SaveStructure;
    public struct BuildSystemActions
    {
        private @ControlMap m_Wrapper;
        public BuildSystemActions(@ControlMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftClick => m_Wrapper.m_BuildSystem_LeftClick;
        public InputAction @DeleteStructure => m_Wrapper.m_BuildSystem_DeleteStructure;
        public InputAction @RightClick => m_Wrapper.m_BuildSystem_RightClick;
        public InputAction @LoadStructure => m_Wrapper.m_BuildSystem_LoadStructure;
        public InputAction @InitNewStructure => m_Wrapper.m_BuildSystem_InitNewStructure;
        public InputAction @SaveStructure => m_Wrapper.m_BuildSystem_SaveStructure;
        public InputActionMap Get() { return m_Wrapper.m_BuildSystem; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BuildSystemActions set) { return set.Get(); }
        public void AddCallbacks(IBuildSystemActions instance)
        {
            if (instance == null || m_Wrapper.m_BuildSystemActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BuildSystemActionsCallbackInterfaces.Add(instance);
            @LeftClick.started += instance.OnLeftClick;
            @LeftClick.performed += instance.OnLeftClick;
            @LeftClick.canceled += instance.OnLeftClick;
            @DeleteStructure.started += instance.OnDeleteStructure;
            @DeleteStructure.performed += instance.OnDeleteStructure;
            @DeleteStructure.canceled += instance.OnDeleteStructure;
            @RightClick.started += instance.OnRightClick;
            @RightClick.performed += instance.OnRightClick;
            @RightClick.canceled += instance.OnRightClick;
            @LoadStructure.started += instance.OnLoadStructure;
            @LoadStructure.performed += instance.OnLoadStructure;
            @LoadStructure.canceled += instance.OnLoadStructure;
            @InitNewStructure.started += instance.OnInitNewStructure;
            @InitNewStructure.performed += instance.OnInitNewStructure;
            @InitNewStructure.canceled += instance.OnInitNewStructure;
            @SaveStructure.started += instance.OnSaveStructure;
            @SaveStructure.performed += instance.OnSaveStructure;
            @SaveStructure.canceled += instance.OnSaveStructure;
        }

        private void UnregisterCallbacks(IBuildSystemActions instance)
        {
            @LeftClick.started -= instance.OnLeftClick;
            @LeftClick.performed -= instance.OnLeftClick;
            @LeftClick.canceled -= instance.OnLeftClick;
            @DeleteStructure.started -= instance.OnDeleteStructure;
            @DeleteStructure.performed -= instance.OnDeleteStructure;
            @DeleteStructure.canceled -= instance.OnDeleteStructure;
            @RightClick.started -= instance.OnRightClick;
            @RightClick.performed -= instance.OnRightClick;
            @RightClick.canceled -= instance.OnRightClick;
            @LoadStructure.started -= instance.OnLoadStructure;
            @LoadStructure.performed -= instance.OnLoadStructure;
            @LoadStructure.canceled -= instance.OnLoadStructure;
            @InitNewStructure.started -= instance.OnInitNewStructure;
            @InitNewStructure.performed -= instance.OnInitNewStructure;
            @InitNewStructure.canceled -= instance.OnInitNewStructure;
            @SaveStructure.started -= instance.OnSaveStructure;
            @SaveStructure.performed -= instance.OnSaveStructure;
            @SaveStructure.canceled -= instance.OnSaveStructure;
        }

        public void RemoveCallbacks(IBuildSystemActions instance)
        {
            if (m_Wrapper.m_BuildSystemActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBuildSystemActions instance)
        {
            foreach (var item in m_Wrapper.m_BuildSystemActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BuildSystemActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BuildSystemActions @BuildSystem => new BuildSystemActions(this);

    // Structure
    private readonly InputActionMap m_Structure;
    private List<IStructureActions> m_StructureActionsCallbackInterfaces = new List<IStructureActions>();
    private readonly InputAction m_Structure_TogglePlay;
    public struct StructureActions
    {
        private @ControlMap m_Wrapper;
        public StructureActions(@ControlMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @TogglePlay => m_Wrapper.m_Structure_TogglePlay;
        public InputActionMap Get() { return m_Wrapper.m_Structure; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(StructureActions set) { return set.Get(); }
        public void AddCallbacks(IStructureActions instance)
        {
            if (instance == null || m_Wrapper.m_StructureActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_StructureActionsCallbackInterfaces.Add(instance);
            @TogglePlay.started += instance.OnTogglePlay;
            @TogglePlay.performed += instance.OnTogglePlay;
            @TogglePlay.canceled += instance.OnTogglePlay;
        }

        private void UnregisterCallbacks(IStructureActions instance)
        {
            @TogglePlay.started -= instance.OnTogglePlay;
            @TogglePlay.performed -= instance.OnTogglePlay;
            @TogglePlay.canceled -= instance.OnTogglePlay;
        }

        public void RemoveCallbacks(IStructureActions instance)
        {
            if (m_Wrapper.m_StructureActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IStructureActions instance)
        {
            foreach (var item in m_Wrapper.m_StructureActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_StructureActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public StructureActions @Structure => new StructureActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IShipActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
    public interface IBuildSystemActions
    {
        void OnLeftClick(InputAction.CallbackContext context);
        void OnDeleteStructure(InputAction.CallbackContext context);
        void OnRightClick(InputAction.CallbackContext context);
        void OnLoadStructure(InputAction.CallbackContext context);
        void OnInitNewStructure(InputAction.CallbackContext context);
        void OnSaveStructure(InputAction.CallbackContext context);
    }
    public interface IStructureActions
    {
        void OnTogglePlay(InputAction.CallbackContext context);
    }
}
